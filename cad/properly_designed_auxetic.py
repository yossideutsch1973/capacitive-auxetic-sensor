#!/usr/bin/env python3
"""
Properly Designed Auxetic Sensor

This creates an auxetic structure that:
1. Starts in the correct folded/compressed rest position
2. Has proper vertical loading for auxetic behavior
3. Will exhibit true negative Poisson's ratio when compressed
"""

import sys
import os
import math
import json

# Add FreeCAD paths
freecad_paths = [
    "/Applications/FreeCAD.app/Contents/Resources/lib",
    "/Applications/FreeCAD.app/Contents/Resources/lib/python3.11/site-packages",
]

for path in freecad_paths:
    if os.path.exists(path) and path not in sys.path:
        sys.path.append(path)

try:
    import FreeCAD
    import Part
    print("‚úÖ FreeCAD imported successfully")
except ImportError as e:
    print(f"‚ùå FreeCAD import failed: {e}")
    sys.exit(1)

def generate_proper_auxetic_cell(L=6.0, theta_rest=15.0, w=8.0, h_strut=1.0):
    """
    Generate auxetic cell in PROPER rest position (folded/compressed).
    
    Parameters:
    -----------
    L : float
        Length of re-entrant struts (mm)
    theta_rest : float  
        Rest angle from vertical (degrees) - small angle = folded
    w : float
        Width of cell at rest (mm)
    h_strut : float
        Thickness of struts (mm)
    
    Returns:
    --------
    dict : Proper auxetic cell geometry
    """
    
    print(f"üîß Creating auxetic cell in PROPER rest position:")
    print(f"   ‚Ä¢ Strut length: {L} mm")
    print(f"   ‚Ä¢ Rest angle: {theta_rest}¬∞ (folded)")
    print(f"   ‚Ä¢ Cell width: {w} mm")
    
    # Convert to radians
    theta_rad = math.radians(theta_rest)
    
    # In rest position, the structure is folded (small angle)
    # When compressed, it will open up (larger angle) - this is auxetic behavior
    
    # Calculate dimensions for folded state
    dx = L * math.sin(theta_rad)  # Small horizontal projection (folded)
    dy = L * math.cos(theta_rad)  # Large vertical projection
    
    # Center horizontal section
    h_center = w - 2 * dx  # Horizontal section in middle
    
    # Total height in rest position (folded = tall and narrow)
    total_height = 2 * dy + h_strut
    
    # Define vertices for FOLDED auxetic cell
    # This will expand laterally when compressed vertically
    vertices = [
        # Bottom section (folded inward)
        (0, 0),                           # 0: Bottom-left
        (dx, dy),                         # 1: Bottom fold point (inward)
        (dx + h_center, dy),              # 2: Bottom-right fold point
        (w, 0),                           # 3: Bottom-right
        
        # Top section (folded inward - mirror)
        (w, total_height),                # 4: Top-right  
        (dx + h_center, dy + h_strut),    # 5: Top-right fold point
        (dx, dy + h_strut),               # 6: Top-left fold point
        (0, total_height),                # 7: Top-left
    ]
    
    # Edges connecting the vertices
    edges = [
        (0, 1),  # Bottom-left angled strut
        (1, 2),  # Bottom horizontal strut
        (2, 3),  # Bottom-right angled strut
        (3, 4),  # Right vertical strut
        (4, 5),  # Top-right angled strut
        (5, 6),  # Top horizontal strut  
        (6, 7),  # Top-left angled strut
        (7, 0),  # Left vertical strut
    ]
    
    return {
        "vertices": vertices,
        "edges": edges,
        "parameters": {
            "L": L,
            "theta_rest": theta_rest,
            "w": w,
            "h_strut": h_strut,
            "cell_width": w,
            "cell_height": total_height,
            "rest_state": "folded_compressed"
        }
    }

def create_proper_sensor_assembly():
    """Create properly designed auxetic sensor assembly."""
    
    print("üîß Creating PROPERLY DESIGNED auxetic sensor...")
    print("‚úÖ Rest position: Folded (compressed)")
    print("‚úÖ Loading: Vertical compression")
    print("‚úÖ Behavior: Lateral expansion under load")
    
    # Create document
    doc = FreeCAD.newDocument("ProperAuxeticSensor")
    
    # Optimized parameters for proper auxetic behavior
    L = 5.0          # Strut length (mm)
    theta_rest = 20.0 # Rest angle (folded position)
    w = 8.0          # Cell width (mm)
    h_strut = 1.0    # Strut thickness (mm)
    height = 2.5     # Extrusion height (mm)
    
    # Generate proper auxetic cell
    cell_data = generate_proper_auxetic_cell(L=L, theta_rest=theta_rest, w=w, h_strut=h_strut)
    
    print(f"\nüìä Proper Design Parameters:")
    print(f"   ‚Ä¢ Cell dimensions: {cell_data['parameters']['cell_width']:.1f} √ó {cell_data['parameters']['cell_height']:.1f} mm")
    print(f"   ‚Ä¢ Rest state: {cell_data['parameters']['rest_state']}")
    print(f"   ‚Ä¢ Expected behavior: Expands laterally when compressed vertically")
    
    # Create unit cell
    unit_cell = create_3d_cell(doc, cell_data, height)
    
    # Create 2√ó2 array (smaller for better demonstration)
    cell_width = cell_data['parameters']['cell_width']
    cell_height = cell_data['parameters']['cell_height']
    
    array_objects = [unit_cell]
    
    for i in range(2):
        for j in range(2):
            if i == 0 and j == 0:
                continue
                
            cell_copy = doc.addObject("Part::Feature", f"Cell_{i}_{j}")
            cell_copy.Shape = unit_cell.Shape.copy()
            
            x_offset = i * cell_width
            y_offset = j * cell_height
            cell_copy.Placement.Base = FreeCAD.Vector(x_offset, y_offset, 0)
            
            array_objects.append(cell_copy)
    
    # Calculate total dimensions
    total_width = 2 * cell_width
    total_height = 2 * cell_height
    
    print(f"   ‚Ä¢ Total structure: {total_width:.1f} √ó {total_height:.1f} √ó {height} mm")
    
    # Create PROPER capacitor plates
    # Bottom plate - sits BELOW the structure
    bottom_plate = doc.addObject("Part::Feature", "BottomPlate")
    plate_thickness = 0.5
    bottom_plate.Shape = Part.makeBox(total_width + 4, total_height + 4, plate_thickness)
    bottom_plate.Placement.Base = FreeCAD.Vector(-2, -2, -plate_thickness - 0.5)  # Gap below
    
    # Top plate - sits ABOVE the structure with proper gap
    top_plate = doc.addObject("Part::Feature", "TopPlate")
    gap = 2.0  # Initial capacitor gap
    top_plate.Shape = Part.makeBox(total_width + 4, total_height + 4, plate_thickness)
    top_plate.Placement.Base = FreeCAD.Vector(-2, -2, height + gap)
    
    # Create guide posts (prevent lateral movement, allow vertical compression)
    guide_posts = []
    post_positions = [
        (-1, -1), (total_width + 1, -1), 
        (-1, total_height + 1), (total_width + 1, total_height + 1)
    ]
    
    for i, (x, y) in enumerate(post_positions):
        post = doc.addObject("Part::Feature", f"GuidePost_{i+1}")
        post_height = height + gap + plate_thickness + 1
        post.Shape = Part.makeCylinder(0.5, post_height)  # Thin guide posts
        post.Placement.Base = FreeCAD.Vector(x, y, -plate_thickness - 0.5)
        guide_posts.append(post)
    
    # Combine all objects
    all_objects = array_objects + [bottom_plate, top_plate] + guide_posts
    
    # Recompute
    doc.recompute()
    
    # Export files
    Part.export(all_objects, "cad/proper_auxetic_sensor.step")
    Part.export(array_objects, "cad/proper_auxetic_structure.step")
    
    print(f"\n‚úÖ Proper auxetic sensor created:")
    print(f"   ‚Ä¢ cad/proper_auxetic_sensor.step")
    print(f"   ‚Ä¢ cad/proper_auxetic_structure.step")
    
    # Save design explanation
    explanation = {
        "design_principle": "Proper auxetic behavior",
        "rest_position": "Folded/compressed (narrow and tall)",
        "loading_direction": "Vertical compression from top plate",
        "expected_behavior": {
            "compression": "Structure gets shorter (height decreases)",
            "auxetic_effect": "Structure gets wider (width increases)", 
            "poisson_ratio": "Negative (width increases as height decreases)",
            "capacitance": "Increases as gap decreases"
        },
        "key_improvements": [
            "Correct rest position (folded)",
            "Proper loading direction (vertical)",
            "Guide posts prevent unwanted lateral movement",
            "Smaller 2x2 array for clearer demonstration",
            "Proper plate positioning for capacitive sensing"
        ],
        "cell_parameters": cell_data['parameters']
    }
    
    with open("cad/proper_design_explanation.json", 'w') as f:
        json.dump(explanation, f, indent=2)
    
    # Close document
    FreeCAD.closeDocument(doc.Name)
    
    return "cad/proper_auxetic_sensor.step"

def create_3d_cell(doc, cell_data, height):
    """Create 3D cell from 2D profile."""
    
    vertices = cell_data["vertices"]
    edges = cell_data["edges"]
    
    print(f"\nCreating 3D cell with vertices:")
    for i, (x, y) in enumerate(vertices):
        print(f"  Vertex {i}: ({x:.2f}, {y:.2f}) mm")
    
    # Create FreeCAD vectors
    points = [FreeCAD.Vector(x, y, 0) for x, y in vertices]
    
    # Create edges
    edge_objects = []
    for start_idx, end_idx in edges:
        line = Part.makeLine(points[start_idx], points[end_idx])
        edge_objects.append(line)
    
    # Create wire, face, and extrude
    wire = Part.Wire(edge_objects)
    face = Part.Face(wire)
    solid = face.extrude(FreeCAD.Vector(0, 0, height))
    
    # Create object
    cell_obj = doc.addObject("Part::Feature", "ProperUnitCell")
    cell_obj.Shape = solid
    
    return cell_obj

def main():
    """Generate properly designed auxetic sensor."""
    
    print("üî¨ PROPERLY DESIGNED Auxetic Sensor Generator")
    print("=" * 60)
    print("üö® This addresses the fundamental design issues:")
    print("   ‚úÖ Correct rest position (folded/compressed)")
    print("   ‚úÖ Proper loading direction (vertical compression)")
    print("   ‚úÖ True auxetic behavior (lateral expansion)")
    print()
    
    try:
        step_file = create_proper_sensor_assembly()
        
        print(f"\nüéâ SUCCESS! Properly designed sensor created:")
        print(f"üìÅ {step_file}")
        
        print(f"\nüîç Key Design Corrections:")
        print(f"   ‚úÖ Rest position: Folded (tall and narrow)")
        print(f"   ‚úÖ Loading: Vertical compression")
        print(f"   ‚úÖ Behavior: Expands laterally when compressed")
        print(f"   ‚úÖ Guide posts: Prevent unwanted lateral movement")
        print(f"   ‚úÖ Proper plate positioning: Above and below structure")
        
        print(f"\nüìã How it works:")
        print(f"   1. Structure starts folded (rest position)")
        print(f"   2. Top plate compresses vertically")
        print(f"   3. Auxetic cells unfold and expand laterally")
        print(f"   4. Capacitor gap decreases ‚Üí capacitance increases")
        print(f"   5. Negative Poisson's ratio achieved!")
        
        print(f"\nüéØ Import proper_auxetic_sensor.step into Shapr3D")
        print(f"   You should see a much more compact, folded structure")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 